func <- function(x){
#x^3-(3*x^2)+10*x+#number 1
#x^2+(x/(x+1))-3#number 2
#(x^4/(x+1))-6#number 3
sin(((2*x)/3)+1)+x#number 4
#cos(((2*x)/3)+1)+x#number 5
#tan(((2*x)/3)+1)+x#number 6
#exp(x)+x-6#number 7
#exp(x^2)-(2*x)-5#number 8
}
func1 <- function(x) {
#(-x^3+(3*x^2)-5)/10#number 1
#sqrt(-x/(x+1)+3)#number 2
#((6*x)+6)^(1/4)#number 3
-sin(((2*x)/3)+1)#number 4
#-cos(((2*x)/3)+1)#number 5
#-tan(((2*x)/3)+1)#number 6
#ln(6-x)#number 7
#sqrt(ln((2*x)+5))#number 8
}
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(func,-2.5,0)
graphing(func,-2.5,5)
graphing(func,-2.5,1)
uniroot(func,c(-3,0))
fixedpoint2(func1,-2)
library(NLRoot)
library(spuRs)
library("SciViews")
func <- function(x){
#x^3-(3*x^2)+10*x+#number 1
#x^2+(x/(x+1))-3#number 2
#(x^4/(x+1))-6#number 3
sin(((2*x)/3)+1)+x#number 4
#cos(((2*x)/3)+1)+x#number 5
#tan(((2*x)/3)+1)+x#number 6
#exp(x)+x-6#number 7
#exp(x^2)-(2*x)-5#number 8
}
func1 <- function(x) {
#(-x^3+(3*x^2)-5)/10#number 1
#sqrt(-x/(x+1)+3)#number 2
#((6*x)+6)^(1/4)#number 3
-sin(((2*x)/3)+1)#number 4
#-cos(((2*x)/3)+1)#number 5
#-tan(((2*x)/3)+1)#number 6
#ln(6-x)#number 7
#sqrt(ln((2*x)+5))#number 8
}
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(func,-2.5,1)
uniroot(func,c(-3,0))
fixedpoint2 <- function(fun, x0, tol=1e-07, niter=500){
## fixed-point algorithm to find x such that fun(x) == x
## assume that fun is a function of a single variable
## x0 is the initial guess at the fixed point
xold <- x0
xnew <- fun(xold)
for (i in 1:niter) {
xold <- xnew
xnew <- fun(xold)
if ( abs((xnew-xold)) < tol )
return(xnew)
}
stop("exceeded allowed number of iterations")
}
fixedpoint(func1,-2, tol = 1e-6)
fixedpoint2(func1,-2)
exp(2^2)
func <- function(x){
#x^3-(3*x^2)+10*x+#number 1
#x^2+(x/(x+1))-3#number 2
#(x^4/(x+1))-6#number 3
#sin(((2*x)/3)+1)+x#number 4
cos(((2*x)/3)+1)+x#number 5
#tan(((2*x)/3)+1)+x#number 6
#exp(x)+x-6#number 7
#exp(x^2)-(2*x)-5#number 8
}
func1 <- function(x) {
#(-x^3+(3*x^2)-5)/10#number 1
#sqrt(-x/(x+1)+3)#number 2
#((6*x)+6)^(1/4)#number 3
#-sin(((2*x)/3)+1)#number 4
-cos(((2*x)/3)+1)#number 5
#-tan(((2*x)/3)+1)#number 6
#ln(6-x)#number 7
#sqrt(ln((2*x)+5))#number 8
}
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(func,-2.5,1)
uniroot(func,c(-3,0))
library(NLRoot)
library(spuRs)
library("SciViews")
func <- function(x){
#x^3-(3*x^2)+10*x+#number 1
#x^2+(x/(x+1))-3#number 2
#(x^4/(x+1))-6#number 3
#sin(((2*x)/3)+1)+x#number 4
cos(((2*x)/3)+1)+x#number 5
#tan(((2*x)/3)+1)+x#number 6
#exp(x)+x-6#number 7
#exp(x^2)-(2*x)-5#number 8
}
func1 <- function(x) {
#(-x^3+(3*x^2)-5)/10#number 1
#sqrt(-x/(x+1)+3)#number 2
#((6*x)+6)^(1/4)#number 3
#-sin(((2*x)/3)+1)#number 4
-cos(((2*x)/3)+1)#number 5
#-tan(((2*x)/3)+1)#number 6
#ln(6-x)#number 7
#sqrt(ln((2*x)+5))#number 8
}
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(func,-2.5,1)
uniroot(func,c(-3,0))
fixedpoint2 <- function(fun, x0, tol=1e-07, niter=500){
## fixed-point algorithm to find x such that fun(x) == x
## assume that fun is a function of a single variable
## x0 is the initial guess at the fixed point
xold <- x0
xnew <- fun(xold)
for (i in 1:niter) {
xold <- xnew
xnew <- fun(xold)
if ( abs((xnew-xold)) < tol )
return(xnew)
}
stop("exceeded allowed number of iterations")
}
fixedpoint(func1,-2, tol = 1e-6)
fixedpoint2(func1,-2)
exp(2^2)
func <- function(x){
#x^3-(3*x^2)+10*x+#number 1
#x^2+(x/(x+1))-3#number 2
#(x^4/(x+1))-6#number 3
#sin(((2*x)/3)+1)+x#number 4
#cos(((2*x)/3)+1)+x#number 5
tan(((2*x)/3)+1)+x#number 6
#exp(x)+x-6#number 7
#exp(x^2)-(2*x)-5#number 8
}
func1 <- function(x) {
#(-x^3+(3*x^2)-5)/10#number 1
#sqrt(-x/(x+1)+3)#number 2
#((6*x)+6)^(1/4)#number 3
#-sin(((2*x)/3)+1)#number 4
#-cos(((2*x)/3)+1)#number 5
-tan(((2*x)/3)+1)#number 6
#ln(6-x)#number 7
#sqrt(ln((2*x)+5))#number 8
}
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(func,-2.5,1)
graphing(func,-2.5,3)
uniroot(func,c(-3,0))
graphing(func,-2.5,0)
graphing(func,-2.5,1)
uniroot(func,c(-3,0))
require('calculus')
library(spuRs)
library(Ryacas)
E <- function (...) {eval(parse(text=paste(...,collapse=" ")))}
wrapper <- function(s){E("function(x){",s,"}")}
#y=parse(text=expression(x^2-2))
y=parse(text=expression(x^2-pi))
#y=parse(text=expression(x^9-1000000))
#y=parse(text=expression(x^6-900000))
#y=parse(text=expression(x^5-25))
#y=parse(text=expression(x^3-(3*x^2)+(10*x)+5))
#y=parse(text=expression(x^3-exp(1)))
#y=parse(text=expression(exp(x)+x-6))
#fx is now a function
fx=wrapper(y)
parsedDerivative=parse(text=derivative(y,"x"))
#dfx now becomes a function
dfx=wrapper(parsedDerivative)
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(fx,-12,12)
uniroot(fx,c(-12,5))
newtons_method <- function(x) {
threshold <- 0.0000005
# just to make sure that it wont be greater than or equal to x
prev_result <- x - 1
ctr <- 1
while(TRUE){
x <- x - (fx(x) / dfx(x))
print(paste("Previous result= ",prev_result))
print(paste("x= ",x))
if (abs(x - prev_result) <=  threshold){
break
}
prev_result <- x
ctr <- ctr + 1
}
print(paste("FINAL ANSWER: ",x))
return(x)
}
fx(newtons_method(10000000000000))
require('calculus')
library(spuRs)
library(Ryacas)
E <- function (...) {eval(parse(text=paste(...,collapse=" ")))}
wrapper <- function(s){E("function(x){",s,"}")}
#y=parse(text=expression(x^2-2))
y=parse(text=expression(x^7-500))
#y=parse(text=expression(x^2-pi))
#y=parse(text=expression(x^9-1000000))
#y=parse(text=expression(x^6-900000))
#y=parse(text=expression(x^5-25))
#y=parse(text=expression(x^3-(3*x^2)+(10*x)+5))
#y=parse(text=expression(x^3-exp(1)))
#y=parse(text=expression(exp(x)+x-6))
#fx is now a function
fx=wrapper(y)
parsedDerivative=parse(text=derivative(y,"x"))
#dfx now becomes a function
dfx=wrapper(parsedDerivative)
graphing <- function(someFunction,neg,pos){
curve(someFunction, xlim=c(neg,pos), col='blue', lwd=1.5, lty=2)
abline(h=0)
abline(v=0)
}
graphing(fx,-12,12)
uniroot(fx,c(-12,5))
newtons_method <- function(x) {
threshold <- 0.0000005
# just to make sure that it wont be greater than or equal to x
prev_result <- x - 1
ctr <- 1
while(TRUE){
x <- x - (fx(x) / dfx(x))
print(paste("Previous result= ",prev_result))
print(paste("x= ",x))
if (abs(x - prev_result) <=  threshold){
break
}
prev_result <- x
ctr <- ctr + 1
}
print(paste("FINAL ANSWER: ",x))
return(x)
}
fx(newtons_method(10000000000000))
